public class Documentation{
	static String doc = "ETHAN ELDRIDGE PROGRAMMING ASSIGNMENT FOR CS 201 OPERATING SYSTEMS\n\n"
					   +"You will need to compile all the java files from the command line before "
					   +"running the Driver file. (cd to directory, javac *.java, java Driver)\n\n"
				       +"This is an CPU Schedule Simulator using different Schedule types. The "
					   +"Options for types of simulator are the following:\n\n"
					   +"1. FIFO Queue Scheduling\n"
					   +"2. Shortest Job First Scheduling\n"
					   +"3. Non Preemptive Priorty Scheduling\n"
					   +"4. Preemptive Priorty Scheduling\n"
					   +"5. Round Robin Scheduling with time quantum 100 units\n\n"
					   +"To Select a simulation from the first screen, enter S and"
					   +" press the enter key or click the enter button. To quit t"
					   +"his simulation press the escape key or the quit button.\n\n"
					   +"When you run a simulation of any schedule type you will see"
					   +" the output of the simulation in the above text area. You will have to "
					   +"scroll to see the full result. The average turn around and waiting time"
					   +" for the CPU scheduling used is displayed last. So please scroll down to"
					   +" see it.\n\n"
					   +"If you would like to not use this GUI interface you may use the command "
					   +"line in the following way:\n\n"
					   +"cd \"directory of this code\" CPU cpuType\n\n"
					   +"cpuType can be one of the following strings:\n\n"
					   +"SJB -> will run shortest job first schedule (not a typo SJB (B!!)\n"
					   +"Priorty -> will run non preemptive priorty\n"
					   +"Priorty Preemptive -> will run preemptive priorty\n"
					   +"Round Robin -> will run in round robin mode\n\n"
					   +"Note that it is case insentive, however you do need to place qoutes around "
					   +"Priorty Preemptive and Round Robin since the program uses the first argument"
					   +" passed to the main function as the deciding factor for algorithm type. So an "
					   +"example would be: java CPU \"Round Robin\"\n\n"
					   +"My design structures and requirment responses: \n"
					   +"For PCB I used the OS book Pg 104 for the main design, and added in start time"
					   +" and fake register varibles. The start time of the PCB is used for CPU calculations"
					   +" and the registers aren't used for anything. The PCB also includes the scheduling variable"
					   +"which corresponds to the priority in priority scheduling, time in SJF, and time left in Round Robin"
					   +"\n\n For the Process I made it have a "
					   +"fake program counter and children list. The only thing used in the Process is the "
					   +"burst time which is used in calculations for priority."
					   +"My queues are based off of a self implemented Fifo Queue using a linked list of PCB's "
					   +"Then for each other type the Queue is subclassed into each of the other scheduling "
					   +"algorithms. It didn't make much sense to use the full blown interface provided by the"
					   +" java Queue interface because these are very specialized Queues and I don't need every"
					   +" function I would have to implement according to the interface.\n\n"
					   +"The UnitTester class is just for testing all my classes at once. You can run it for fun if"
					   +"you'd like, just do a command line run and give it an argument if you don't want it to create"
					   +"a log file. Sometimes the log file doesn't contain everything for some reason so redirecting "
					   +"the output of the program like: java UnitTester dummy > output.txt is good.\n\n"
					   +"The scheduler class provides a wrapper around the Scheduling algorithms so the CPU doesn't have "
					   +"to worry about which scheduling call to call. \n\n"
					   +"The CPU class is the work horse of everything, deciding which scheduler to use based on command "
					   +"line arguments. It keeps a list of the current processes in a hashmap with the PID as the key and "
					   +"keeps track of all the statistics I report, the turn around time, waiting time, execution time, and "
					   +"queue entry time. The schedule has fake functions for allocating space for a process. During execution "
					   +"the cpu dequeues the process queue and checks if its executing IO, if it is there is a chance that it is"
					   +"done and will run immediatly, otherwise the job goes back onto the Queue and the next job comes off. "
					   +"The CPU also handles freeing a job once it's terminated, removing the job from 'memory'. Once the "
					   +"CPU is done executing (there are no more jobs to deal with) it prints out the statistics it has gathered.\n\n"
					   +"At the beginning of each simulation 8 processes are added to the job queue. Then while the jobs are executed "
					   +"there is a chance (10%) of a new job coming in. If the scheduler is preemptive the new job can preempty the "
					   +"current job and run instead. When a job is executing there is a chance (2%) that the job will have to do IO "
					   +"and switch its state to waiting and release the CPU to the next process.The chances of IO is so low because "
					   +"otherwise it might take a very very long time to execute all the jobs and the simulation will never end.\n\n"
					   +"The output of the simulation is displayed on the console and is broken up by long lines of equal signs. The "
					   +"process list is displayed from the CPU and the Queue is shown as well. The current job is listed as it is dequed "
					   +"and the information is displayed different for each scheduler. In case you're wondering, the process queue will "
					   +"never have a job that states it's state as RUNNING because the queue is printed out at the end of each loop through "
					   +"the simulation, but the current job's state will display RUNNING if it is. When a job is HALTED it is sitting in the"
					   +" the queue, when it is WAITING it is waiting for IO to finish, and when it's READY it is ready for execute. Processes "
					   +"are ran if there state is not WAITING.\n\n"
					   +"The 3 test cases are the following: \n\n"
					   +"java CPU \n"
					   +"java CPU ROUND ROBIN\n"
					   +"java CPU PRIORTY PREEMPTIVE\n\n"
					   +"And there output files are listed as: output1.txt,output2.txt,output3.txt respectfully in the submitted files.";


}
